# swtcnode.default.conf  
#

lua_package_path "${prefix}/../lib/?.lua;;";
upstream swtc_ws_server {

    server  106.13.44.32:5020;
    server  106.13.50.211:5020;
    server  106.14.154.38:5020;
    server  106.38.30.100:5020;
    server  106.38.30.104:5020;
    server  106.38.30.126:5020;
    server  106.38.30.21:5020;
    server  106.38.30.32:5020;
    server  106.38.30.4:5020;
    server  112.74.178.146:5020;
    server  114.102.148.187:5020;
    server  114.215.78.16:5020;
    server  114.215.78.2:5020;
    server  114.215.78.207:5020;
    server  115.238.236.91:5020;
    server  115.28.184.187:5020;
    server  115.28.42.241:5020;
    server  117.78.44.90:5020;
    server  118.24.14.162:5020;
    server  119.249.60.38:5020;
    server  119.3.58.91:5020;
    server  120.27.24.37:5020;
    server  120.27.25.10:5020;
    server  121.42.29.187:5020;
    server  123.127.160.105:5020;
    server  123.127.160.111:5020;
    server  123.127.160.115:5020;
    server  123.127.160.141:5020;
    server  123.127.160.152:5020;
    server  123.127.160.155:5020;
    server  123.177.20.229:5020;
    server  123.177.22.5:5020;
    server  123.177.23.133:5020;
    server  124.232.142.41:5020;
    server  124.93.26.5:5020;
    server  129.211.85.250:5020;
    server  13.125.249.62:5020;
    server  134.175.191.90:5020;
    server  139.129.110.216:5020;
    server  139.129.96.77:5020;
    server  139.198.177.19:5020;
    server  139.224.15.234:5020;
    server  139.9.0.40:5020;
    server  148.70.148.14:5020;
    server  153.127.2.140:5020;
    server  175.126.168.75:5020;
    server  180.76.51.249:5020;
    server  221.180.141.5:5020;
    server  223.100.160.5:5020;
    server  35.183.111.229:5020;
    server  36.5.194.194:5020;
    server  39.104.188.146:5020;
    server  39.108.119.103:5020;
    server  39.98.243.77:5020;
    server  39.98.72.254:5020;
    server  39.98.93.86:5020;
    server  42.202.134.6:5020;
    server  42.81.160.87:5020;
    server  43.247.184.224:5020;
    server  47.101.41.91:5020;
    server  47.103.20.63:5020;
    server  47.104.163.253:5020;
    server  47.105.57.71:5020;
    server  47.105.98.127:5020;
    server  47.106.92.241:5020;
    server  47.244.141.115:5020;
    server  47.244.144.70:5020;
    server  47.244.145.74:5020;
    server  47.244.37.95:5020;
    server  47.254.169.60:5020;
    server  47.52.195.110:5020;
    server  47.74.51.71:5020;
    server  47.75.121.107:5020;
    server  47.75.245.253:5020;
    server  47.75.43.234:5020;
    server  47.75.44.68:5020;
    server  47.75.44.75:5020;
    server  47.75.73.168:5020;
    server  47.75.87.233:5020;
    server  47.89.32.133:5020;
    server  47.92.195.174:5020;
    server  47.92.4.236:5020;
    server  47.94.210.134:5020;
    server  49.232.30.43:5020;
    server  54.180.29.20:5020;
    server  54.223.58.54:5020;
    server  59.111.105.106:5020;
    server  59.175.148.101:5020;
    server  70.30.19.130:5020;
    server  76.71.8.172:5020;

}
upstream swtc_wss_server {

    server  c01.jingtum.com:5020;
    server  c02.jingtum.com:5020;
    server  c03.jingtum.com:5020;
    server  c04.jingtum.com:5020;
    server  c05.jingtum.com:5020;

}
lua_shared_dict healthcheck 1m;

lua_socket_log_errors off;

init_worker_by_lua_block {
    local hc = require "resty.upstream.healthcheck"

    -- raw websocket command , white words ,black words for checking
    local ws_cmd_checks = {}
    ws_cmd_checks[1] = {[[{"id": 1,"command":"server_info"}]], "(full|proposing)", "Insufficient"}
    ws_cmd_checks[2] = {[[{"id":2,"command":"account_info","account":"j4BdJBUCQN8JETufzagGZyqwxmTwJL42Vg"}]], nil, "Insufficient"}
    ws_cmd_checks[3] = {[[{"id":3,"command":"account_lines","account":"j4BdJBUCQN8JETufzagGZyqwxmTwJL42Vg"}]], nil, "Insufficient"}

    local ok, err = hc.spawn_checker{
        shm = "healthcheck",  -- defined by "lua_shared_dict"
        upstream = "swtc_ws_server", -- defined by "upstream"
        type = "ws",
        ws_cmd_checks = ws_cmd_checks,
        interval = 3000,  -- run the check cycle every 3 sec
        timeout = 4000,   -- 4 sec is the timeout for network operations
        fall = 2,  -- # of successive failures before turning a peer down
        rise = 5,  -- # of successive successes before turning a peer up
        concurrency = 10,  -- concurrency level for test requests
    }
    if not ok then
        ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
        return
    end

    local ok, err = hc.spawn_checker{
        shm = "healthcheck",  -- defined by "lua_shared_dict"
        upstream = "swtc_wss_server", -- defined by "upstream"
        type = "wss",
        ws_cmd_checks = ws_cmd_checks,
        interval = 3000,  -- run the check cycle every 3 sec
        timeout = 4000,   -- 4 sec is the timeout for network operations
        fall = 2,  -- # of successive failures before turning a peer down
        rise = 5,  -- # of successive successes before turning a peer up
        concurrency = 10,  -- concurrency level for test requests
    }
    if not ok then
        ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
        return
    end

}
# server {
#     listen 5020 ssl;
#     server_name swtcnode.jccdex.cn;

#     ssl_certificate /etc/nginx/certificates/fullchain.pem;
#     ssl_certificate_key /etc/nginx/certificates/privkey.pem;

#     ssl_session_timeout 5m;

#     ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
#     ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
#     ssl_prefer_server_ciphers on;
    
#     location / {
#         proxy_pass  https://swtc_wss_server;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
    
#         proxy_connect_timeout       60s;
#         proxy_read_timeout          60s;
#         proxy_send_timeout          60s;
#     }
# }
server {
    listen 5020;
    
    location / {
        proxy_pass  http://swtc_ws_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    
        proxy_connect_timeout       60s;
        proxy_read_timeout          60s;
        proxy_send_timeout          60s;
    }
    # status page for all the peers:
    location = /status {
        access_log off;
        allow 172.17.0.1;
        deny all;
    
        default_type text/plain;
        content_by_lua_block {
            local hc = require "resty.upstream.healthcheck"
            ngx.say("Nginx Worker PID: ", ngx.worker.pid())
            ngx.print(hc.status_page())
        }
    }
}


