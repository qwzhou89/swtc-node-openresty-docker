# swtcnode.default.conf  
#

lua_package_path "${prefix}/../ngx_lua_waf/?.lua;${prefix}/../lib/?.lua;;";
upstream swtc_ws_server {
    include /etc/nginx/conf.d/ws_servers; 
}
upstream swtc_rpc_server {
    include /etc/nginx/conf.d/rpc_servers;
}

lua_shared_dict healthcheck 2m;
lua_shared_dict log_dict 2M;
lua_shared_dict limit 10m;

lua_socket_log_errors off;

init_by_lua_file  "../ngx_lua_waf/init.lua";
access_by_lua_file "../ngx_lua_waf/waf.lua";

resolver 223.5.5.5;
lua_max_running_timers 200;
lua_max_pending_timers 200;

init_worker_by_lua_block {
    local hc = require "resty.upstream.healthcheck"

    -- websocket command , white words ,black words for checking
    local ws_cmd_checks = {}
    ws_cmd_checks[1] = {[[{"id":1,"command":"server_info"}]], "(full|proposing)", "InsufficientNetworkMode"}

    -- spawn_checker options
    local checker_options = {
        shm = "healthcheck",  -- defined by "lua_shared_dict"
        interval = 3000,  -- run the check cycle every 3 sec
        timeout = 4000,   -- 4 sec is the timeout for network operations
        fall = 2,  -- # of successive failures before turning a peer down
        rise = 5,  -- # of successive successes before turning a peer up
        concurrency = 10,  -- concurrency level for test requests
    }

    -- ws server checker
    checker_options["upstream"] = "swtc_ws_server" -- defined by "upstream"
    checker_options["type"] = "ws"
    checker_options["ws_cmd_checks"] = ws_cmd_checks
    local ok, err = hc.spawn_checker(checker_options)
    if not ok then
        ngx.log(ngx.ERR, "failed to spawn ws server health checker: ", err)
        return
    end
}
server {
    listen 5020;

    location / {
        proxy_pass  http://swtc_ws_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    
        proxy_connect_timeout       60s;
        proxy_read_timeout          60s;
        proxy_send_timeout          60s;
        log_by_lua_block {
            local log_dict = ngx.shared.log_dict
            local upstream_time = tonumber(ngx.var.upstream_response_time)
            if upstream_time then
                log_dict:incr("us_time-sum-" .. ngx.var.upstream_addr, upstream_time, 0)
                log_dict:incr("us_time-nb-" .. ngx.var.upstream_addr, 1, 0)
            end
        }
    }
    # status page for all the peers:
    location = /status {
        access_log off;
        allow 127.0.0.1;
        allow 172.17.0.1;
        deny all;
    
        default_type text/plain;
        content_by_lua_block {
            local hc = require "resty.upstream.healthcheck"
            ngx.say("Nginx Worker PID: ", ngx.worker.pid())
            ngx.print(hc.status_page())
        }
    }
}
